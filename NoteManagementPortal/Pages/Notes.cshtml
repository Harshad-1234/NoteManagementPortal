@page
@model NoteManagementPortal.Pages.NotesModel
@{

    ViewData["Title"] = TempData["UserName"];

    ViewData["NavigationBrand"] = "Welcome " + Model.uesrProfileResponse.Username + ", Here Are Your Notes";
    var userJson = HttpContext.Session.GetString("CurrentUser");
   

}

<div class="text-center" style="margin-top:125px">


    @if (ViewData.ContainsKey("StatusMessage"))
    {
        <div class="alert alert-success" role="alert" style="margin-top:20px">
            @ViewData["StatusMessage"]
        </div>
    }



    <table id="notesTable" class="table table-striped">
        <thead>
            <tr >
                <th style="width: 19%;">Title</th>
                <th style="display:none; width:5%" >Description hidden</th>
                <th style="width:19%">Created On</th>
                <th style="width:19%">Updated On</th>
                
                <th style="width: 19%;">Description</th>
                <th style="width: 19%;">Action</th>
              
            </tr>
        </thead>
        <tbody>
            @foreach (var note in Model.NotesResponse.Notes)
            {
                

                <tr data-note-id="@note.Id">
                    <td style="width: 19%;">@note.Title</td>

                    <td class="truncate-text" style="display:none;width: 5%;" id="description">@note.Description</td>

                    <td style="width: 19%;">@note.CreatedDate.ToString("dd/MM/yy")</td>

                    <td style="width: 19%;">@note.ModifedDate.ToString("dd/MM/yy")</td>
                 
                    <td class="truncate-text" style="width: 19%;">
                        <button type="button" class="zoom-button" onclick=" openViewModal (@note.Id, '@note.Title' ,'@note.Description.Replace("'", "\\' ")') " style="border:none;background-color:transparent" data-toggle="tooltip" data-placement="top" title="View description">
                            <img src="~/Images/view.png" alt="add Icon" style="height:35px;margin-right:-12px;" class="zoom-icon" />
                           
                        </button>
                     
                    </td>
                    <td class="truncate-text" style="width: 19%;">

                        <button type="button" class="zoom-button" onclick=" openEditModal(@note.Id, '@note.Title' ,'@note.Description.Replace("'", "\\' ")') " style="border:none;background-color:transparent" data-toggle="tooltip" data-placement="top" title="Edit description">
                           
                            <img src="~/Images/newEdit.png" alt="add Icon" style="height:20px;margin-top:8px;" class="edit-icon" />
                        </button>

                        <button type="button" class="zoom-button" onclick=" downloadNoteAsPDF(@note.Id, '@note.Title' ,'@note.Description.Replace("'", "\\' ")');hideTooltip(this); " style="border:none;background-color:transparent;margin-left:10px" data-toggle="tooltip" data-placement="top" title="Download PDF">
                            <img src="~/Images/download.png" alt="add Icon" style="height:35px;margin-right:-12px;" class="zoom-icon" />

                        </button>

                        <button type="button" class="zoom-button" onclick="ConfirmDelete(@note.Id,'@note.Title')" style="border:none;background-color:transparent;margin-left:10px" data-toggle="tooltip" data-placement="top" title="Delete note">

                            <img src="~/Images/delete.png" alt="add Icon" style="height:26px;margin-top:8px;" class="edit-icon" />
                        </button>
                        @* <a onclick="ConfirmDelete(@note.Id,'@note.Title')" class="btn btn-danger" style="margin-left: 20px;">
                            <i class="fas fa-trash-alt"></i> Delete
                        </a> *@

                    </td>
                    
                    @* <td style="width: 19%;">
                       
                       
                       
                    
                    </td> *@
                </tr>
            }
        </tbody>
    </table>

   

</div>

<!-- Edit Note Modal -->
<div class="modal fade"  id="editNoteModal" tabindex="-1" role="dialog" aria-labelledby="editNoteModalLabel" aria-hidden="true" >
    <div class="modal-dialog" role="document" >
        <div class="modal-content" >
            <div class="modal-header">
                <h5 class="modal-title" id="editNoteModalLabel" style="margin-left:auto;margin-right:auto"> </h5>
                
            </div>
            <div class="modal-body">
                <!-- Form for editing note -->
                <form id="editNoteForm">
                    <div class="form-group" id="TitleSection">
                   
                        <label for="editTitle" style="margin-top:15px;font-weight:bold">Title</label>
                       
                        <input type="text" id="editTitle" maxlength="20" oninput="updateTitle(event);" >
                        <span id="titleError" style="color: red;"></span>
                    </div>
                    <div class="form-group">
                        <label for="description" style="margin-bottom:20px;margin-top:35px;font-weight:bold">Description</label>
                       <div id="disableDiv">

                            <textarea name="editDescription" id="editDescription" rows="15" style="white-space: pre-line; resize: none;"> </textarea>
                            <span id="descriptionError" style="color: red;"></span>

                       </div>
                        
                    </div>

                    <div class="modal-footer justify-content-center">
                   
                      @*   <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="CloseEditModel();" id="closeModel" style="margin-right:-5px">Close</button> *@
                      @*   <button type="button" data-dismiss="modal" onclick="ChangeEditModel();" id="editBtn" style="width:10px" class="zoom-button-edit2">
                            <img src="~/Images/edit.jpg" alt="Edit Icon" class="zoom-icon-edit2" />

                        </button> *@
                      @*   <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="CancelEditModel();"id="cancelEdit">Cancel</button> *@
                        <button type="button" class="btn btn-primary" onclick="updateNote();" id="saveChangesBtn">Save Changes</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="CloseEditModel();" id="closeModel" >
                            Close
                        </button>

                    </div>
                </form>
            </div>

        </div>
    </div>
</div>

<!-- Create Note Modal -->
<div class="modal fade" id="createNoteModal" tabindex="-1" role="dialog" aria-labelledby="editNoteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editNoteModalLabel" style="margin-left:auto;margin-right:auto">Create Note</h5>
                @* <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="CloseCreateModel();"  style="color:crimson;background-color:#007bff;border:none">
                    <span aria-hidden="true" style="font-size:30px">&times;</span>
                </button> *@
            </div>
            <div class="modal-body">
                <!-- Form for editing note -->
                <form id="editNoteForm" >
                    <div class="form-group" style="font-weight:bold">
                        <label for="editTitle">Title</label>
                        <input type="text" id="createTitle" maxlength="20" oninput="updateTitle(event);">
                        <span id="titleErrorCreate" style="color: red;"></span>
                    </div>
                    <div class="form-group">
                        <label for="description" style="margin-bottom:20px;margin-top:35px;font-weight:bold">Description</label>
                        <textarea name="editDescription" id="createDescription" rows="15" style="white-space: pre-line;"> </textarea>
                        <span id="descriptionErrorCreate" style="color: red;"></span>
                    </div>

                    <div class="modal-footer justify-content-center">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="CloseCreateModel();">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="createNote();" > Save </button>
                    </div>
                </form>
            </div>
          
        </div>
    </div>
</div>
<!-- Delete confirmation Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" role="dialog" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header" style="text-align:center">
                <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Deletion</h5>
               
            </div>
            <div class="modal-body">
                Are you sure you want to delete this note?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="cancelDelete()">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn" onclick="OnConfirm()">Confirm</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="confirmSignOutModel" tabindex="-1" role="dialog" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Sign Out</h5>

            </div>
            <div class="modal-body">
                Are you sure you want sign out ?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="cancelSignOut()">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn" onclick="OnConfirmSignOut()">Confirm</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="userProfileModal" tabindex="-1" role="dialog" aria-labelledby="editNoteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editNoteModalLabel" style="margin-left:auto;margin-right:auto">Edit User Profile</h5>
                @* <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="CloseCreateModel();"  style="color:crimson;background-color:#007bff;border:none">
                <span aria-hidden="true" style="font-size:30px">&times;</span>
                </button> *@
            </div>
            <div class="modal-body">
                <form id="editNoteForm" style="margin-top:30px;text-align:center">
                    <div class="form-group" style="font-weight: bold; margin-bottom: 10px; ">
                        <label for="editTitle" style="margin-right:278px">Username</label> <br />
                        <input type="text" id="username" maxlength="20"  value="@Model.uesrProfileResponse.Username" style="width:350px">
                       
                    </div>
                    <div class="form-group" style="font-weight: bold; margin-bottom: 10px;" >
                        <label for="editTitle" style="margin-right:307px">Email</label> <br />
                        <input type="text" id="email" maxlength="20" value="@Model.uesrProfileResponse.Email" style="width:350px">
                      
                    </div>
                    <div class="form-group" style="font-weight: bold; margin-bottom: 25px;">
                        <label for="editTitle" style="margin-right:296px">Mobile</label> <br />
                        <input type="text" id="mobileNo" maxlength="20" value="@Model.uesrProfileResponse.MobileNo" style="width:350px">
                        
                    </div>

                    <div class="modal-footer justify-content-center">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="CloseProfileModal();">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="UpdateProfile();"> Save </button>
                    </div>
                    <span id="EditProfileError" style="color: red;"></span>
                </form>
            </div>

        </div>
    </div>
</div>


<div class="modal fade" id="ChangePasswordModal" tabindex="-1" role="dialog" aria-labelledby="editNoteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editNoteModalLabel" style="margin-left:auto;margin-right:auto">Change Password</h5>
                @* <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="CloseCreateModel();"  style="color:crimson;background-color:#007bff;border:none">
                <span aria-hidden="true" style="font-size:30px">&times;</span>
                </button> *@
            </div>
            <div class="modal-body">
                <form id="editNoteForm" style="margin-top:30px;text-align:center">
                    <div class="form-group" style="font-weight: bold; margin-bottom: 10px;">
                        <label for="editTitle" style="margin-right:260px">Password</label> <br />
                        <input type="password" id="password" maxlength="20"  style="width:330px">

                    </div>
                    <div class="form-group" style="font-weight: bold; margin-bottom: 25px;">
                        <label for="editTitle" style="margin-right:196px">Confirm Password</label> <br />
                        <input type="password" id="confirm_password" maxlength="20" style="width:330px">

                    </div>
                   

                    <div class="modal-footer justify-content-center">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="CloseChangePasswordModal();">Cancel</button>
                        <button type="button" class="btn btn-primary"  onclick="ChangePassword();"> Update </button>
                    </div>
                    <span id="ChangePasswordError" style="color: red;"></span>
                </form>
            </div>

        </div>
    </div>
</div>

<style>


  
  
    #notesTable tbody tr:hover {
        background-color: aliceblue;
        cursor: pointer;
    }

    .modal-header {
        background-color: #007bff; /* Change the background color as needed */
        color: #fff; /* Text color for header */
        border-bottom: 1px solid #ddd; /* Bottom border */
        padding: 10px 15px; /* Padding inside the header */
    }

    /* Modal Title */
    .modal-title {
        margin: 0; /* Remove default margin */
    }

    /* Modal Body */
    .modal-body {
        padding: 15px; /* Padding inside the body */
    }

    /* Modal Footer */
    .modal-footer {
  /*       background-color: #f7f7f7; */ /* Change the background color as needed */
        border-top: 1px solid #ddd; /* Top border */
        padding: 10px 15px; /* Padding inside the footer */
        text-align: right; /* Align buttons to the right */
    }

    /* Close Button in Header */
    .modal-header .close {
        color: #fff; /* Text color for close button */
    }

    /* Edit Button */
    #editBtn {
        background: transparent; /* Transparent background */
        border: none; /* Remove border */
        padding: 0; /* Remove padding */
        cursor: pointer; /* Cursor style */
    }

        /* Edit Icon */
        #editBtn img {
            width: 50px; /* Adjust icon size as needed */
            height: 40px;
            vertical-align: middle; /* Align icon vertically */
            margin-left:-15px;
        }

    /* Edit Title Input */
    #editTitle {
        width: 100%; /* Full width input */
        padding: 8px; /* Padding inside input */
        border: 1px solid #ccc; /* Border style */
        border-radius: 4px; /* Border radius */
        box-sizing: border-box; /* Box sizing */
        margin-top: 10px; /* Margin top */
    }

    /* Edit Description Textarea */
    #editDescription {
        width: 100%; /* Full width textarea */
        padding: 8px; /* Padding inside textarea */
        border: 1px solid #ccc; /* Border style */
        border-radius: 4px; /* Border radius */
        box-sizing: border-box; /* Box sizing */
        margin-top: 10px; /* Margin top */
    }

    /* Save Changes Button */
    #saveChangesBtn {
        margin-left: 10px; /* Margin left for spacing */
    }

    #createTitle {
        width: 100%; /* Full width input */
        padding: 8px; /* Padding inside input */
        border: 1px solid #ccc; /* Border style */
        border-radius: 4px; /* Border radius */
        box-sizing: border-box; /* Box sizing */
        margin-top: 10px; /* Margin top */
    }

    /* Edit Description Textarea */
    #createDescription {
        width: 100%; /* Full width textarea */
        padding: 8px; /* Padding inside textarea */
        border: 1px solid #ccc; /* Border style */
        border-radius: 4px; /* Border radius */
        box-sizing: border-box; /* Box sizing */
        margin-top: 10px; /* Margin top */
    }


    /* Button styling */
    .add-button {
        position: relative;
        margin-top: -72px;
        margin-right: 20px;
        margin-bottom: 20px; /* Adjust margin-bottom to fit your layout */
        border: none;
        background-color: #fff;
        border-radius: 50%;
        width: 106px; /* Adjust size as needed */
        height: 54px; /* Adjust size as needed */
        cursor: pointer;
        overflow: hidden;
        transition: transform 0.2s ease;
    }

    .add-button img {
        width: 50px;
        height:50px;
        transition: opacity 0.2s ease;
    }

    /* Hover effect */
    .add-button:hover {
        transform: scale(1.3); /* Adjust scale factor for zoom effect */
    }

    .add-button:hover img {
        opacity: 0.8; /* Adjust opacity for dimming effect */
    }




    .pulse-animation {
        animation: pulseAnimation 1.5s infinite;
    }
  



    /* Add this CSS to your existing stylesheet */
    .zoom-button {
        border: none;
        background-color: transparent;
        transition: transform 0.2s ease; /* Smooth transition for the zoom effect */
        cursor: pointer;
    }

        .zoom-button:hover {
            transform: scale(1.1); /* Zoom in slightly on hover */
        }

    /* Style for the icons inside the button */
    .zoom-icon,
    .edit-icon {
        height: 35px;
        margin-right: -12px;
        transition: transform 0.2s ease; /* Smooth transition for the zoom effect */
    }

    .zoom-button:hover .zoom-icon {
        transform: scale(1.1); /* Zoom in slightly on hover */
    }

    .zoom-button:hover .edit-icon {
        transform: scale(1.1); /* Zoom in slightly on hover */
    }


    .zoom-icon-edit2 {
        border: none;
        background-color: #f7f7f7;
        transition: transform 0.1s ease; /* Smooth transition for the zoom effect */
        cursor: pointer;
    }

    .zoom-icon-edit2:hover {
            transform: scale(1.2); /* Zoom out slightly on hover */
        }

    /* Style for the icon inside the button */
    .zoom-icon-edit2 {
        width: 50px; /* Adjust icon size as needed */
        height: 50px;
        vertical-align: middle; /* Align icon vertically */
    }

    

</style>


<script >

   

    var notesData = @Html.Raw(Json.Serialize(Model.NotesResponse.Notes));

    var updatedTitle = ''; 
    var noteId;
    var noteTitle;
    let editorInstance;
    var noteIdViewModel;
    var TitleViewModel;
    var DescViewModel;
    var UserName = @Html.Raw(Json.Serialize(TempData["UserName"]));
    var API_URL = 'https://localhost:44373/';

    // function downloadNoteAsPDF() {

    //     debugger
    //     // Initialize jsPDF
    //     const doc = new jsPDF();

    //     // Get the HTML content of the editor
    //     editorInstance.then(editor => {
    //         var content = editor.getData();
    //         content = content.replace(/&nbsp;/g, ' ');
    //         debugger
    //         // Add HTML content to the PDF
    //         doc.fromHTML(content, 15, 15);

    //         // Save the PDF file
    //         doc.save("Note.pdf");
    //     }).catch(error => {
    //         console.error('Error:', error);
    //     });
    // }

    function hideTooltip(element) {
        
        $(element).tooltip('hide');
    }


    function ChangePasswordModal() 
    {
        var Error = document.getElementById('ChangePasswordError');

        Error.innerText = '';


        $('#password').val('');
        $('#confirm_password').val('');

        $("#ChangePasswordModal").modal('show');
        
    }


    function CloseChangePasswordModal()
    {

        $("#ChangePasswordModal").modal('hide');
    }


    function ChangePassword() 
    {
        debugger

        var currentUser = @Html.Raw(userJson);

        var newPassword = $('#password').val();
        var confirmPassword = $('#confirm_password').val();

        var Error = document.getElementById('ChangePasswordError');

        if (newPassword.trim() === '') {
            Error.innerText = 'Please enter a password.';
            return;
        } else {
            Error.innerText = '';
        }

        if (confirmPassword.trim() === '') {
            Error.innerText = 'Please enter a confirm password.';
            return;
        } else {
            Error.innerText = '';
        }

        if (newPassword != confirmPassword) {
            Error.innerText = 'Password doesn\'t match';
            return;
        } else {
            Error.innerText = '';
        }


        var requestBody = {
            NewPassword: newPassword 
        };


        var headers = {
            UserId: currentUser.UserId,
            accessToken: currentUser.Token
        };

        $.ajax({
            url: API_URL + 'ChangePassword',
            type: 'POST',
            contentType: 'application/json',
            headers: headers,
            data: JSON.stringify(requestBody),
            success: function (response) {

                $('#ChangePasswordModal').modal('hide');

                window.location.href = '/ChangePassword?IsUpdated=true';
            },
            error: function (xhr, status, error) {

                $('#ChangePasswordModal').modal('hide');

                window.location.href = '/ChangePassword?IsUpdated=false';
            }
        });
    }


    function UpdateProfile() 
    {
        debugger
      

        var currentUser = @Html.Raw(userJson);

        var username = $('#username').val();
        var email = $('#email').val();
        var mobile = $('#mobileNo').val();


        var Error = document.getElementById('EditProfileError');

        if (username.trim() === '') {
            Error.innerText = 'Please enter a username.';
            return;
        } else {
            Error.innerText = '';
        }

        if (email.trim() === '') {
            Error.innerText = 'Please enter a email.';
            return;
        } else {
            Error.innerText = '';
        }

        if (mobile.trim() === '') {
            Error.innerText = 'Please enter a mobile number.';
            return;
        } else {
            Error.innerText = '';
        }

        var requestBody = {
            UserId: currentUser.UserId,
            Username: username,
            Email: email ,
            MobileNo : mobile
        };

    
        var headers = {
            UserId: currentUser.UserId,
            accessToken: currentUser.Token
        };

       
        $.ajax({
            url: API_URL + 'UpdateUserProfile',
            type: 'PUT',
            contentType: 'application/json',
            headers: headers,
            data: JSON.stringify(requestBody),
            success: function (response) {

                $('#userProfileModal').modal('hide');
              
                window.location.href = '/UpdateProfile?IsUpdated=true';
            },
            error: function (xhr, status, error) {

                $('#userProfileModal').modal('hide');

                window.location.href = '/UpdateProfile?IsUpdated=false';
            }
        });
    
    }

    function DisplayProfile() 
    {
        var Error = document.getElementById('EditProfileError');

        Error.innerText = '';


        $('#username').val('@Model.uesrProfileResponse.Username');
        $('#email').val('@Model.uesrProfileResponse.Email');
        $('#mobileNo').val('@Model.uesrProfileResponse.MobileNo');

        $("#userProfileModal").modal('show');
       
    
    }


    function CloseProfileModal() { $("#userProfileModal").modal('hide'); }

    function downloadNoteAsPDF(noteId, title, description) {

        debugger
        // Initialize jsPDF
        const { jsPDF } = window.jspdf;

            
            debugger

            let doc = new jsPDF('l', 'mm', [1500, 1400]);

          var content = description;

            content = '<h5>Title : ' + title + '</h5> <h5> Description : </h5> ' + content;

            var sanitizedContent = window.DOMPurify.sanitize(content);

            sanitizedContent = sanitizedContent.replace(/<table>/g, '<table style=" width: 100%;">');
            sanitizedContent = sanitizedContent.replace(/<td>/g, '<td style="border: 1px solid ;width: 50%;">');

            doc.html(sanitizedContent, {
                x: 15, y: 15, width: 1000, windowWidth: 650,
                callback: function (doc) {

                    debugger
                    doc.save(title+"-Note.pdf");
                },


            });

    }

    function OnConfirmSignOut() 
    {
        window.location.href = '/Login';

    }


    function cancelSignOut() 
    {

        $('#confirmSignOutModel').modal('hide');
    
    }

    function SignOut()
    {
        $('#confirmSignOutModel').modal('show');
    }


    function CancelEditModel() 
    {
        
        if (editorInstance) {
            editorInstance.then(editor => {
                editor.destroy().then(() => {
                    editorInstance = null;

                    var titleError = document.getElementById('titleError');
                    titleError.innerText = '';

                    var descriptionError = document.getElementById('descriptionError');
                    descriptionError.innerText = '';

                    openEditModal(noteIdViewModel, TitleViewModel, DescViewModel);
                });
            });
        }
       
    
    }

    function OnConfirm() 
    {
        window.location.href = '/DeleteNote?id=' + noteId +'&Title='+noteTitle;
    
    }

    function cancelDelete()
    {
        $('#confirmDeleteModal').modal('hide');
    }

    function ConfirmDelete(Id, Title)
    {
        
        
        $('#confirmDeleteModal').modal('show');
        noteId = Id;

        noteTitle = Title;
    }

    function updateTitle(event) 
    {
       
        updatedTitle = event.target.value;
    }




    function CloseEditModel()
    {
        
        $('#editNoteModal').modal('hide');

    }

    function CloseCreateModel()
    {
        

        $('#createNoteModal').modal('hide');

      
    }

    $('#editNoteModal').on('hidden.bs.modal', function () {
        

        if (editorInstance) {
            editorInstance.then(editor => {
                editor.destroy().then(() => {
                    editorInstance = null;
                });
            });
        }
    });

    $('#createNoteModal').on('hidden.bs.modal', function () {

             if (editorInstance) {
            editorInstance.then(editor => {
               
                editor.setData('');
            });
        }


        if (editorInstance) {
            editorInstance.then(editor => {
                editor.destroy().then(() => {
                    editorInstance = null;
                });
            });
        }
    });
   

    function openCreateModal()
    {

        debugger

     
        $('#createNoteModal').modal('show');

        $('#createTitle').val('');

        var titleError = document.getElementById('titleErrorCreate');
        titleError.innerText = '';

        var descriptionError = document.getElementById('descriptionErrorCreate');
        descriptionError.innerText = '';

        if (editorInstance) {
            editorInstance.then(editor => {
                editor.destroy().then(() => {
                    editorInstance = null;
                });
            });
        }

        editorInstance = ClassicEditor
            .create(document.querySelector('#createDescription'))
            .catch(error => {
                console.error(error);
            });
    }

    function ChangeEditModel() 
    {
        
        $('#editDescription').prop('readonly', false).css('background-color', '');
        // $('#editBtn').hide();
        $('#saveChangesBtn').show();
        // $('#cancelEdit').show();
        $('#closeModel').hide();
        
        

     
     
    }

    function openViewModal(noteId, title, description) 
    {
        debugger
        noteIdViewModel = noteId;
        TitleViewModel = title;
        DescViewModel = description;

        $('#editNoteModalLabel').text(title);

        $('#TitleSection').css('display', 'none');

        var disableDiv = document.getElementById('disableDiv');
        disableDiv.style.opacity = '0.5'; // Example: reducing opacity to indicate disabled state
        disableDiv.style.pointerEvents = 'none';

        $('#editNoteModal').modal('show');

        $('#editTitle').prop('readonly', true).css('background-color', '#f5f5f5');
        $('#editDescription').prop('readonly', true).css('background-color', '#f5f5f5');


        $('#editTitle').val(title);
        // $('#cancelEdit').hide();
        $('#closeModel').show();

        if (editorInstance) {
            editorInstance.then(editor => {
                editor.destroy().then(() => {
                    editorInstance = null;
                });
            });
        }


        editorInstance = ClassicEditor
            .create(document.querySelector('#editDescription'), { allowedContent: true })
            .catch(error => {
                console.error(error);
            });

        editorInstance.then(editor => {
            editor.setData(description);
            

        });


        $('#editNoteForm').append('<input type="hidden" id="editNoteId" name="editNoteId" value="' + noteId + '">');
        $('#saveChangesBtn').hide();
       

    
    
    }

    function openEditModal(noteId, title, description) {

        debugger
        noteIdViewModel = noteId;
        TitleViewModel = title;
        DescViewModel = description;

        $('#editNoteModalLabel').text(title);

        $('#TitleSection').css('display', 'block');

        var disableDiv = document.getElementById('disableDiv');
        disableDiv.style.opacity = ''; // Example: reducing opacity to indicate disabled state
        disableDiv.style.pointerEvents = '';

        $('#editNoteModal').modal('show'); 

        $('#editTitle').prop('readonly', true).css('background-color', '#f5f5f5');
        $('#editDescription').prop('readonly', false).css('background-color', '');

       
        $('#editTitle').val(title);
        // $('#cancelEdit').show();
        $('#closeModel').show();
       

        

        editorInstance = ClassicEditor
            .create(document.querySelector('#editDescription'), { allowedContent: true })
            .catch(error => {
                console.error(error);
            });

        editorInstance.then(editor => {
            editor.setData(description); 
           
        });

      
        $('#editNoteForm').append('<input type="hidden" id="editNoteId" name="editNoteId" value="' + noteId + '">');
        $('#saveChangesBtn').show();
        // $('#editBtn').hide();


    }
 
 
   
        $(document).ready(function () {

        $('#profileDiv').css('display', 'block');
        $('#addBtn').css('display', 'block');
        $('#navBrandTitle').css('margin-left', '0px');
        $('#notesTable').DataTable();
        $('[data-toggle="tooltip"]').tooltip();

        });

  
       

    document.addEventListener("DOMContentLoaded", function () {

        var alertMessage = document.querySelector(".alert.alert-success");
        if (alertMessage) {

            alertMessage.style.display = "block";

            setTimeout(function () {
                alertMessage.style.display = "none";
            }, 3000); 
        }
    });

    function copyToClipboard() {
        const textarea = document.getElementById('description');
        textarea.select();
        document.execCommand('copy');
        alert('Copied to clipboard!');
    }

    function createNote() 
    {
        editorInstance.then(editor => {
            return editor.getData(); 
        }).then(data => {



            var title = $('#createTitle').val();

            var titleError = document.getElementById('titleErrorCreate');
            var descriptionError = document.getElementById('descriptionErrorCreate');

            if (title.trim() === '') {
                titleError.innerText = 'Please enter a title.';
                return;
            } else {
                titleError.innerText = ''; 
            }

            if (data.trim() === "") {
                descriptionError.innerText = 'Please enter a description.';
                return;
            } else {
                descriptionError.innerText = ''; 
            }


            var isTitleExists = notesData.some(note => note.title.toLowerCase() === title.toLowerCase());
            if (isTitleExists) {
                titleError.innerText = 'Title already exists. Please enter a different title.';
                return;
            }
          
            // Create the request body
            var requestBody = {
                title: title,
                description: data 
            };

            // Get the current user data
            var currentUser = @Html.Raw(userJson);

            // Set the headers
            var headers = {
                UserId: currentUser.UserId,
                accessToken: currentUser.Token
            };

            // Make the AJAX request
            $.ajax({
                url: API_URL+'AddNote',
                type: 'POST',
                contentType: 'application/json',
                headers: headers,
                data: JSON.stringify(requestBody),
                success: function (response) {
                   
                    
                    $('#createNoteModal').modal('hide');

                    if (editorInstance) {
                        editorInstance.then(editor => {
                            editor.destroy().then(() => {
                                editorInstance = null; 
                            });
                        });
                    }



                    window.location.href = '/AddNote?IsAdded=true&Title=' + response.title;
                },
                error: function (xhr, status, error) {
                    
                    console.log(xhr.responseText);
                    if (editorInstance) {
                        editorInstance.then(editor => {
                            editor.destroy().then(() => {
                                editorInstance = null; 
                            });
                        });
                    }
                    window.location.href = '/AddNote?IsAdded=false';
                }
            });
        }).catch(error => {
            
            console.error('Error:', error);
        });
    }
  
    function updateNote() {

     

        editorInstance.then(editor => {
            return editor.getData(); // This returns a promise
        }).then(data => {

            debugger
            // Set the value of the description input field
            var updatedDescription = data;

            // Now you have the updated description, proceed with your code here

            // Get other form data
            var noteId = $('#editNoteId').val();
            var title = $('#editTitle').val();
            

            // Create the request body
            var requestBody = {
                id: noteId,
                title: title,
                description: data // Use the updated description here
            };

            var titleError = document.getElementById('titleError');
            var descriptionError = document.getElementById('descriptionError');

            if (title.trim() === '') {
                titleError.innerText = 'Please enter a title.';
                return;
            } else {
                titleError.innerText = ''; // Clear error message if title is not empty
            }

            if (data.trim() === "") {
                descriptionError.innerText = 'Please enter a description.';
                return;
            } else {
                descriptionError.innerText = ''; /// Clear error message if title is not empty
            }

            
            // Get the current user data
            var currentUser = @Html.Raw(userJson);

            // Set the headers
            var headers = {
                UserId: currentUser.UserId,
                accessToken: currentUser.Token
            };

            // Make the AJAX request
            $.ajax({
                url: API_URL+'UpdateNote',
                type: 'PUT',
                contentType: 'application/json',
                headers: headers,
                data: JSON.stringify(requestBody),
                success: function (response) {

                    $('#editNoteModal').modal('hide');
                    if (editorInstance) {
                        editorInstance.then(editor => {
                            editor.destroy().then(() => {
                                editorInstance = null; 
                            });
                        });
                    }
                   

                    window.location.href = '/EditNote?IsUpdated=true&Title=' + response.title;
                },
                error: function (xhr, status, error) {
                   
                    console.log(xhr.responseText);
                    if (editorInstance) {
                        editorInstance.then(editor => {
                            editor.destroy().then(() => {
                                editorInstance = null; 
                            });
                        });
                    }
                    window.location.href = '/EditNote?IsUpdated=false';
                }
            });
        }).catch(error => {
            
            console.error('Error:', error);
        });
    }

    

</script>
